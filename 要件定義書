ストップウォッチアプリ 要件定義書 (MVP版)
1. はじめに
1.1. 目的
本ドキュメントは、開発するストップウォッチアプリケーション（以下、本アプリ）のMVP（Minimum Viable Product）に関する要件を定義するものである。本アプリは、ユーザーが自身の活動時間を記録・可視化し、タスク管理の効率化とモチベーション維持を支援することを目的とする。

1.2. 背景
日々の活動（勉強、仕事、トレーニング、趣味など）に費やす時間を正確に把握し、振り返ることは、生産性向上や目標達成において重要である。しかし、既存のツールでは操作が煩雑であったり、詳細な分析が難しかったりする課題がある。本アプリは、シンプルかつ直感的な操作で、活動時間の記録・分類・可視化を実現し、これらの課題を解決する。

1.3. スコープ（対象範囲）
本要件定義書のスコープは、MVPとして開発する機能に限定する。MVPの主な機能は以下の通りである。

タイマーによる時間計測機能

計測記録の名前付け、カテゴリ分類、タグ付け機能

記録の一覧表示機能

カテゴリ別・タグ別の時間集計グラフ表示機能

1.4. 用語定義
記録: ユーザーがタイマーで計測し、保存した活動時間とその付随情報（名前、カテゴリ、タグなど）。

カテゴリ: 記録を大まかに分類するための属性（例：勉強、運動、仕事）。

タグ: 記録に付与できる、より詳細な属性情報（例：数学、有酸素運動、会議）。最大3つまで。

MVP: Minimum Viable Product。実用最小限の製品。

2. システム概要
2.1. システム構成
本アプリは、スマートフォン（主に縦向き表示）で動作するクライアントサイドアプリケーションとして開発する。データは原則としてデバイスのローカルストレージに保存する。

2.2. 利用者（ペルソナ）
主なターゲットユーザー: 部活動のトレーニングと大学受験勉強を両立する18歳の高校生Aさん。

利用シーン: Aさんは、日々のトレーニングや勉強の時間を本アプリで記録する。就寝前に、カテゴリ別（例：勉強、トレーニング）やタグ別（例：数学、英語、ランニング）の活動時間グラフを確認し、自身の努力を可視化することでモチベーションを維持し、翌日の計画の参考にする。

3. 機能要件 (MVP)
UI/UX設計書（stopwatch_app_ux_design_v1_mvp）で定義された画面設計および操作フローを基本とする。

3.1. タイマー機能 (タイマー画面)
タイマー作成・名前設定:

ユーザーは新しいタイマーに任意の名前を付けることができる。

タイマー名は、記録保存時に最終的な名前として使用される。

時間計測:

タイマーは「スタート」操作により0秒から時間を計測開始する。

時間表示は HH:MM:SS 形式で、1秒ごとに更新される。

「ストップ」操作により時間計測を停止する。

「リセット」操作により、計測中の時間を0に戻し、タイマー名を保持したまま待機状態に戻る。リセット操作は計測中およびストップ（記録保存前）状態でのみ可能とする。

今日の累計時間表示:

タイマー画面には、その日に記録された全活動の合計時間を表示する。

3.2. 記録入力機能 (記録入力画面)
計測結果表示:

タイマー停止後、計測された時間が表示される（編集不可）。

タイマー名編集:

計測時に設定したタイマー名を編集できる。タイマー名は必須入力とする。

カテゴリ選択・作成:

記録に対してカテゴリを選択する。カテゴリは必須選択とする。

既存のカテゴリリストから選択する。

リストにない場合、新しいカテゴリ名を入力することで新規作成できる。

タグ付け・削除:

記録に対して最大3つまでタグを付与できる。タグは任意入力とする。

タグは自由テキスト入力とする。

付与されたタグはチップ形式で表示され、各タグに削除ボタン（例：[×]）を設け、個別に削除できる。

記録保存・破棄:

「保存して完了」操作により、入力された情報（タイマー名、計測時間、カテゴリ、タグ）を記録としてローカルストレージに保存する。

「破棄」操作により、計測結果と入力情報を保存せずにタイマー画面に戻る。

3.3. カテゴリ管理機能
カテゴリ作成: 記録入力画面にて、新しいカテゴリ名を入力することで暗黙的に作成される。

カテゴリ一覧: 記録入力画面のカテゴリ選択UIで、既存のカテゴリが一覧表示される。

カテゴリ編集・削除: MVPスコープ外とする。

3.4. タグ管理機能
タグ作成: 記録入力画面にて、新しいタグ名を入力することで暗黙的に作成される。

タグ削除（記録からの削除）: 記録入力画面で、記録に紐づいたタグを個別に削除できる。

タグ自体の編集・削除: MVPスコープ外とする。

3.5. 記録一覧表示機能 (記録一覧画面)
記録表示:

保存された記録をリスト形式で表示する。

各記録には、タイマー名、カテゴリ（アイコンや色で識別可能）、タグ、計測時間、開始日時（または記録日時）を表示する。

リストは新しい記録が上に来るように時系列（降順）で表示する。

今日の合計時間表示:

記録一覧画面には、その日に記録された全活動の合計時間を表示する。

記録詳細確認・削除:

リスト内の各記録をタップすることで、詳細確認画面へ遷移する（MVPでは詳細確認画面は設けず、一覧画面上での情報表示を主とし、削除機能を優先する可能性あり。要検討）。

各記録に対して削除操作を行えるようにする。

フィルタリング・検索: MVPでは「全て」の記録を表示することを基本とし、高度なフィルタリング（期間指定など）や検索機能はスコープ外とする。

3.6. グラフ表示機能 (グラフ表示画面)
表示対象切り替え:

「カテゴリ別」と「タグ別」の表示をタブなどで切り替えられる。

グラフ表示:

選択された対象（カテゴリ別またはタグ別）の合計活動時間を横棒グラフで表示する。

グラフには、各項目名とその合計時間を表示する。

グラフ描画時には、スムーズなアニメーションを適用する。

集計期間:

全期間のデータを集計対象とする。期間変更機能はMVPスコープ外。

インサイト表示:

グラフ下部に、計測時間などを活用した固定メッセージ（例：「今週は合計XX時間活動しました！素晴らしいです！」、「XXカテゴリの活動がYY時間増えましたね！」など数パターン）を表示する。

3.7. ナビゲーション
主要画面遷移:

タイマー画面、記録一覧画面、グラフ表示画面間をボトムナビゲーション（またはハンバーガーメニュー）で遷移できる。

タイマー画面 →（計測停止）→ 記録入力画面 →（保存）→ 記録一覧画面（またはタイマー画面）という主要フローを持つ。

戻る操作: 各画面のヘッダーには、前の画面に戻るための操作（例：[←]アイコン）を配置する。

4. 非機能要件 (MVP)
4.1. ユーザビリティ
直感的な操作性: UI/UX設計書に基づき、ターゲットユーザーが迷うことなく直感的に操作できるインターフェースを提供する。

視覚的フィードバック: ユーザーの操作に対して、ボタンの色変化、アニメーション、メッセージ表示などの適切な視覚的フィードバックを返す。

効率性: 最小限のタップ数や画面遷移で目的の操作（時間計測、記録保存、情報確認）を達成できるようにする。

デザインの一貫性: アプリ全体でカラーパレット、フォント、アイコンなどのデザイン要素に一貫性を持たせる。

4.2. パフォーマンス
応答性: 画面遷移やボタン操作に対する応答は3秒以内とし、ユーザーにストレスを与えないようにする。

データ処理: ローカルストレージへの記録保存・読み込みは迅速に行う。大量の記録（例：1000件程度）が蓄積された場合でも、一覧表示やグラフ描画のパフォーマンスが著しく低下しないように配慮する（MVPでは基本的なリスト表示とし、高度な最適化は将来検討）。

バッテリー消費: アプリがフォアグラウンドで動作している際、およびバックグラウンドでタイマーが動作している場合（もし実装する場合）のバッテリー消費を不必要に増大させないように配慮する。

4.3. セキュリティ
データ保護: ユーザーの記録データはデバイスのローカルストレージに保存する。クラウドへのデータ送信はMVPスコープ外とするため、通信経路上での情報漏洩リスクは考慮しない。

入力値検証: ユーザーが入力する値（タイマー名、カテゴリ名、タグ名など）に対して、不適切な値（例：極端に長い文字列、スクリプトなど）が入力された場合の基本的なバリデーションを検討する（MVPでは文字数制限程度を想定）。

4.4. 運用・保守性
コード品質: 理解しやすく、変更・拡張が容易なコード構造を心がける。

エラーハンドリング: 想定されるエラー（例：データ保存失敗など）に対して、ユーザーに状況を伝える適切なメッセージを表示する。

ログ: MVPでは詳細なログ出力は必須としないが、デバッグに最低限必要な情報はコンソール等に出力できるようにする。

4.5. 互換性
デバイス対応: 主にスマートフォンの縦向き表示に対応する。特定のOSバージョン（例：最新から2世代前までなど）での動作を保証する。

レスポンシブデザイン: スマートフォン縦向き表示を最適化する。横向き表示やタブレット端末への完全な最適化はMVPスコープ外とする。

アクセシビリティ:

フォントサイズは、OSのシステム設定にある程度追従できるようにする。

主要な操作要素のコントラスト比は、WCAG 2.1 AAレベルの達成を目指す。

主要なUI要素には、スクリーンリーダー（例：VoiceOver）が適切に読み上げられるように、代替テキストやラベルを設定する。

5. その他
5.1. 将来の拡張性
本アプリはMVPとして開発後、ユーザーフィードバックを元に以下の機能拡張を検討する。

詳細な統計・分析機能（期間指定、比較など）

目標設定機能

カスタムテーマ機能

データエクスポート/インポート機能

クラウド同期・バックアップ機能

ソーシャル連携機能（進捗共有など）